{
  "Impact": "The complete impact of this vulnerability is not yet known. An attacker could be able to generate a private key for a given public key if they are able to reproduce the environment which was used when the key pair was generated.", 
  "CVSS_SecurityRequirementsIR": "H", 
  "CVSS_EnvironmentalVector": "CDP:N/TD:M/CR:H/IR:H/AR:ND", 
  "Title": "Cryptographic key generation from low entropy sources and key reuse allow private keys to be derrived", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "N", 
  "CAM_ScoreCurrentWidelyKnown": 0, 
  "IDNumber": "155744", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "H", 
  "CVSS_Authenication": "N", 
  "CVSS_BaseScore": 7.8, 
  "CAM_EaseOfExploitation": "0", 
  "IPProtocol": "", 
  "CERTAdvisory": "", 
  "CVSS_CollateralDamagePotential": "N", 
  "Revision": 16, 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "1", 
  "CAM_WidelyKnown": "0", 
  "CAM_Population": "0", 
  "Description": "In Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices, the authors demonstrate how low entroyp and key reuse is a problem, particularly in low power, embedded, network devices. RSA and DSA background, but much less, maybe just one sentence, or work into \"DSA and RSA private keys can be obtained. The Digital Signature Algorithm (DSA) is a United States Federal Government standard for digital signatures. Key generation has two phases. The first phase is a choice of algorithm parameters which may be shared between different users of the system, while the second phase computes public and private keys for a single user. The Ron Rivest, Adi Shamir and Leonard Adleman (RSA) is an algorithm for public-key cryptography that is based on the presumed difficulty of factoring large integers, the factoring problem. The RSA algorithm involves three steps: key generation, encryption and decryption. RSA involves a public key and a private key. The public key can be known to everyone and is used for encrypting messages. Messages encrypted with the public key can only be decrypted using the private key. Incorporating randomness and strong algorithms into the key generation process is essential for modern cryptography. The generation of RSA and DSA public and private keys can fail catastrophically when used with malfunctioning random number generators. Transport Layer Security (TLS) relies on RSA encryption to perform their core security functions while Secure Shell (SSH) relies on DSA digital signatures to perform their core security functions. Note that other applications using RSA and DSA could be affected. The paper describes several types of problem related to low entropy. In RSA, In DSA, 1. in RSA, reused primes p and q allow N to be found, allows e to be found, therefore factorable, two keys moduli N share a p or q\n2. in DSA if ephermeral signing keys have low entropy, two messages with the same k expose the private key x\n3. same keys generated due to same low entropy input In addition, the paper points out: Some devices were found to use the same keys, either due to having the same state for sources of entropy when the keys were generated or simply because the vendor reused the same key across multiple devices. Linux programs often use /dev/urandom instead of /dev/random, since /dev/random will block until it has sufficient entropy to answer the call. /dev/urandom on Linux doesn't have sufficient entropy until approximately 66 seconds after boot. OpenSSH generates initial host keys 4 seconds after boot, usnd /dev/urandom with insufficient entropy. More prominent on low power devices (single CPU core, single thread). 6. OpenSSL overly depends on clock tick boundary The Dropbear SSH implementation seeds ephemeral DSA keys before sufficient entropy is available from /dev/urandom. Reseeds after a 32 bit counter wraps, has feature to do better, but disabled? to sign messages are predictable, grabs seed when OS doesn't have enough urandom entropy yet, reseeds after 32 bit counter wraps", 
  "CVSS_AccessComplexity": "M", 
  "CVSS_SecurityRequirementsAR": "ND", 
  "Resolution": "We are currently unaware of a practical solution to this problem.", 
  "Author": "This document was written by Michael Orlando.", 
  "CAM_Exploitation": "0", 
  "DateLastUpdated": "2012-09-14T16:50:00-04:00", 
  "CVSS_IntegrityImpact": "P", 
  "VRDA_D1_Population": "2", 
  "CVSS_TemporalVector": "E:POC/RL:U/RC:UC", 
  "CVSS_ReportConfidence": "UC", 
  "CVSS_ConfidentialityImpact": "C", 
  "CVSS_BaseVector": "AV:N/AC:M/Au:N/C:C/I:P/A:N", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "POC", 
  "ThanksAndCredit": "Thanks to Nadia Heninger, Zakir Durumeric, Eric Wustrow, and Alex Halderman for reporting this vulnerability.", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 0, 
  "CVSS_TemporalScore": 6.3, 
  "VRDA_D1_Impact": "3", 
  "CVSS_TargetDistribution": "M", 
  "CAM_InternetInfrastructure": "0", 
  "CVSS_RemediationLevel": "U", 
  "Workarounds": "", 
  "ID": "VU#155744", 
  "CVSS_AvailabilityImpact": "N", 
  "CAM_ScoreCurrent": 0, 
  "Overview": "Generating cryptographic keys from sources of insufficient entropy can result in keys, primes, and other components that can be used to derrive private keys. In addition, reusing keys and key components can make it easy to derive private keys. Systems with limited sources of entropy, such as network or embedded devices, are particularly prone to these types of vulnerabilities.", 
  "CAM_Impact": "0", 
  "DatePublic": "2012-07-02T00:00:00", 
  "DateCreated": "2012-06-27T11:12:15-04:00", 
  "References": [
    "https://factorable.net/", 
    "https://factorable.net/weakkeys12.extended.pdf", 
    "http://eprint.iacr.org/2012/064.pdf", 
    "https://en.wikipedia.org/wiki/Digital_Signature_Algorithm", 
    "https://en.wikipedia.org/wiki/RSA_(algorithm)", 
    "http://dankaminsky.com/2012/02/17/primalfear/", 
    "http://kqueue.org/blog/2012/06/25/more-randomness-or-less/", 
    "https://grsecurity.net/pipermail/grsecurity/2012-July/001093.html"
  ], 
  "Keywords": "Weak key generation and key reuse allow private keys to be factored\nmake sure these are the only two major underlying issues", 
  "CVSS_EnvironmentalScore": 5.6, 
  "CAM_AttackerAccessRequired": "0"
}