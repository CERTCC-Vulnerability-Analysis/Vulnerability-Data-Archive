{
  "Impact": "Local users gains access to shadow password file", 
  "CVSS_SecurityRequirementsIR": "", 
  "CVSS_EnvironmentalVector": "", 
  "Title": "imap-dumps-core", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "", 
  "CAM_ScoreCurrentWidelyKnown": 4.5, 
  "IDNumber": "9651", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "", 
  "CVSS_Authenication": "", 
  "CVSS_BaseScore": "", 
  "CAM_EaseOfExploitation": "10", 
  "IPProtocol": "", 
  "CERTAdvisory": "", 
  "CVSS_CollateralDamagePotential": "", 
  "Revision": "1", 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "", 
  "CAM_WidelyKnown": "15", 
  "CAM_Population": "10", 
  "Description": "(from the l0pht advisory)\n\nIt is possible to crash the imapd server in several possible\nplaces.  Due to the lack of handling for the SIGABRT signal and the\nnature of the IMAP protocol in storing folders locally on the\nserver; a core dump is produced in the users current\ndirectory. This core dump contains the password and shadow password\nfiles from the system.", 
  "CVSS_AccessComplexity": "", 
  "CVSS_SecurityRequirementsAR": "", 
  "Resolution": "", 
  "Author": "This document was written by CN=Shawn V Hernan/O=CERT.", 
  "CAM_Exploitation": "10", 
  "DateLastUpdated": "1998-05-21T11:53:08-04:00", 
  "CVSS_IntegrityImpact": "", 
  "VRDA_D1_Population": "", 
  "CVSS_TemporalVector": "", 
  "CVSS_ReportConfidence": "", 
  "CVSS_ConfidentialityImpact": "", 
  "CVSS_BaseVector": "", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "", 
  "ThanksAndCredit": "", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 6, 
  "CVSS_TemporalScore": "", 
  "VRDA_D1_Impact": "", 
  "CVSS_TargetDistribution": "", 
  "CAM_InternetInfrastructure": "0", 
  "CVSS_RemediationLevel": "", 
  "Workarounds": "(from the l0pht advisory) This said, we recommend that core dumps not be permitted from any\napplication running out of inetd. If you need to test these things\ndo so in a controlled environment. No production machine should be\nallowed to crap all over the place. \"But wait!\", You say, \"what if\nwe think the application is robust and then realize there is a\nproblem later on. We need that core file\". Face it, there are very\nfew people out there that know what to do with core files other\nthan rm(1) them. However, if this is the case then you sved\nyourself some heartache. Now that you know the application is not\nready for prime time you can pull it back into a controlled\nenvironment and attempt to make it dump core again. For Solaris you can set the core dump size via the bourne shell's\nbuilt-in ulimit command. /etc/init.d/inetsvc should contain the line ulimit -c 0 directly\nabove the line starting off inetd. ---excerpt snip---\nulimit -c 0\n/usr/sbin/inetd -s\n--- excerpt snip--- Don't forget to kill inetd and re-run the inetsvc script. Other OS's should check if their bourne shell has a built in ulimit\nand if not, follow whatever methods are used on their particular\nsystem to prevent core dumps or limit their size to 0.", 
  "ID": "VU#9651", 
  "CVSS_AvailabilityImpact": "", 
  "CAM_ScoreCurrent": 3.75, 
  "Overview": "", 
  "CAM_Impact": "8", 
  "DatePublic": "", 
  "DateCreated": "1998-05-21T11:53:06-04:00", 
  "References": "l0pht advisory at http://www.l0pht.com/advisories/imapd.txt", 
  "Keywords": [
    "core", 
    "imap", 
    "shadow password"
  ], 
  "CVSS_EnvironmentalScore": "", 
  "CAM_AttackerAccessRequired": "10"
}