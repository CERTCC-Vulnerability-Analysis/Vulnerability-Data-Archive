{
  "Impact": "An unprivileged user is able to obtain the stderr output of an\narbitrary rexec connection.", 
  "CVSS_SecurityRequirementsIR": "", 
  "CVSS_EnvironmentalVector": "", 
  "Title": "rexecd", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "", 
  "CAM_ScoreCurrentWidelyKnown": 0, 
  "IDNumber": "20768", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "", 
  "CVSS_Authenication": "", 
  "CVSS_BaseScore": "", 
  "CAM_EaseOfExploitation": "0", 
  "IPProtocol": "", 
  "CERTAdvisory": "", 
  "CVSS_CollateralDamagePotential": "", 
  "Revision": 6, 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "", 
  "CAM_WidelyKnown": "20", 
  "CAM_Population": "8", 
  "Description": "Rshd and rexecd can output stderr by opening a socket from the\nserver machine to the client machine which is accepted by the rsh\nor rexec client.  The rsh client opens the initial connection from\na privileged port, rshd responds from a privileged port, and\nredirects the connection to a privleged port on the client machine.\nThe trust model is preserved because this whole process is\ncontrolled by the setuid program rsh on the client machine.\n\nExec is fundamentally similar to the shell service except that\ninstead of a remote and local username being transmitted (for\n.rhosts and hosts.equiv authentication only) a username and\npassword is transmitted, and the whole exchange uses unprivileged\nports.\n\nBecause rexec uses unprivileged ports for the whole process, any\nuser can send a request to a rexecd requesting connection of the\nstderr stream to an arbitrary port on the client machine.  Since\nthe client is unprivileged, there is no possibility for the\nlegitimate stderr stream to be destined for a privileged port.\n\nIn addition, spoofing techniques could allow the client to direct\nthe stderr stream towards an arbitrary host as well as an arbitrary\nport, possibly exploiting a given trust model.\n\nSince rexecd terminates if the stderr port can't be connected to,\nand the port can be specified, rexecd can be used to easily scan\nthe client host from the server host.  The included script\n\"rexecscan\" demonstrates this.", 
  "CVSS_AccessComplexity": "", 
  "CVSS_SecurityRequirementsAR": "", 
  "Resolution": "", 
  "Author": "This document was written by Rob D. McMillan.", 
  "CAM_Exploitation": "5", 
  "DateLastUpdated": "2004-01-15T11:21:00-05:00", 
  "CVSS_IntegrityImpact": "", 
  "VRDA_D1_Population": "", 
  "CVSS_TemporalVector": "", 
  "CVSS_ReportConfidence": "", 
  "CVSS_ConfidentialityImpact": "", 
  "CVSS_BaseVector": "", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "", 
  "ThanksAndCredit": "", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 0, 
  "CVSS_TemporalScore": "", 
  "VRDA_D1_Impact": "", 
  "CVSS_TargetDistribution": "", 
  "CAM_InternetInfrastructure": "8", 
  "CVSS_RemediationLevel": "", 
  "Workarounds": "", 
  "ID": "VU#20768", 
  "CVSS_AvailabilityImpact": "", 
  "CAM_ScoreCurrent": 0, 
  "Overview": "", 
  "CAM_Impact": "8", 
  "DatePublic": "", 
  "DateCreated": "1998-05-21T11:44:52-04:00", 
  "References": "", 
  "Keywords": [
    "rexecd", 
    "port scanning", 
    "sniffing"
  ], 
  "CVSS_EnvironmentalScore": "", 
  "CAM_AttackerAccessRequired": "0"
}