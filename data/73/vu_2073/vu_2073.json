{
  "Impact": "Can gain access to the file system with an arbitrary userid to\ncreate/delete/modify system files. This can quickly lead to root.", 
  "CVSS_SecurityRequirementsIR": "", 
  "CVSS_EnvironmentalVector": "", 
  "Title": "nfs", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "", 
  "CAM_ScoreCurrentWidelyKnown": 0, 
  "IDNumber": "2073", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "", 
  "CVSS_Authenication": "", 
  "CVSS_BaseScore": "", 
  "CAM_EaseOfExploitation": "0", 
  "IPProtocol": "", 
  "CERTAdvisory": "", 
  "CVSS_CollateralDamagePotential": "", 
  "Revision": "1", 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "", 
  "CAM_WidelyKnown": "0", 
  "CAM_Population": "0", 
  "Description": "The \"proxy\" problem is that the portmapper provides a\ncall forwarding service.  If a machine exports a filesystem to itself\n(common in many configurations), one can request the portmapper forward\na mountd request to itself.  When processed, that call appears to have\ncome from the localhost which is (at many sites) authorized so mountd\nreturns a file handle which is then passed back to the (unauthorized)\noriginal system.  Given a file handle, tools exist to perform NFS\nrequests directly to the NFS server without needing to go though\nthe portmapper - making it easy to bypass UNIX's permission checks.\n\nThere are a number of other problems in various versions of NFS.\nThey include:\n\n1. mounts work when they shouldn't:\n+ export list is > 256 chars\n+ export list expanded from groups is > 256\n+ mis-spelling of a netgroup (?)\n2. portmapper proxy\n(described above)\n3. guess filehandles\n4. chdir bug\n(cd /.. and gain access to other filesystems)\n5. mknod bug\n(can make special devices in a writable directory)\n6. uid/umask bug\n(can work as root instead of \"nobody\" (-1))\n\nCleansed Description:\n\nThe \"proxy\" problem is that the portmapper provides a\ncall forwarding service.  If a machine exports a filesystem to itself\n(common in many configurations), one can request the portmapper forward\na mountd request to itself.  When processed, that call appears to have\ncome from the localhost which is (at many sites) authorized so mountd\nreturns a file handle which is then passed back to the (unauthorized)\noriginal system.  Given a file handle, tools exist to perform NFS\nrequests directly to the NFS server without needing to go though\nthe portmapper - making it easy to bypass UNIX's permission checks.\n\nThere are a number of other problems in various versions of NFS.\nThey include:\n\n1. mounts work when they shouldn't:\n+ export list is > 256 chars\n+ export list expanded from groups is > 256\n+ mis-spelling of a netgroup (?)\n2. portmapper proxy\n(described above)\n3. guess filehandles\n4. chdir bug\n(cd /.. and gain access to other filesystems)\n5. mknod bug\n(can make special devices in a writable directory)\n6. uid/umask bug\n(can work as root instead of \"nobody\" (-1))", 
  "CVSS_AccessComplexity": "", 
  "CVSS_SecurityRequirementsAR": "", 
  "Resolution": "", 
  "Author": "This document was written by new-vul.", 
  "CAM_Exploitation": "0", 
  "DateLastUpdated": "1998-05-21T11:34:32+00:00", 
  "CVSS_IntegrityImpact": "", 
  "VRDA_D1_Population": "", 
  "CVSS_TemporalVector": "", 
  "CVSS_ReportConfidence": "", 
  "CVSS_ConfidentialityImpact": "", 
  "CVSS_BaseVector": "", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "", 
  "ThanksAndCredit": "", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 0, 
  "CVSS_TemporalScore": "", 
  "VRDA_D1_Impact": "", 
  "CVSS_TargetDistribution": "", 
  "CAM_InternetInfrastructure": "0", 
  "CVSS_RemediationLevel": "", 
  "Workarounds": "", 
  "ID": "VU#2073", 
  "CVSS_AvailabilityImpact": "", 
  "CAM_ScoreCurrent": 0, 
  "Overview": "", 
  "CAM_Impact": "0", 
  "DatePublic": "", 
  "DateCreated": "1998-05-21T11:35:06-04:00", 
  "References": "", 
  "Keywords": "nfs", 
  "CVSS_EnvironmentalScore": "", 
  "CAM_AttackerAccessRequired": "0"
}