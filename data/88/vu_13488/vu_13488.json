{
  "Impact": "Local user can gain root access at least. There may be situations where a remote user can gain root access.", 
  "CVSS_SecurityRequirementsIR": "", 
  "CVSS_EnvironmentalVector": "", 
  "Title": "third_party/DNS", 
  "DateFirstPublished": "", 
  "CVSS_AccessVector": "", 
  "CAM_ScoreCurrentWidelyKnown": 0, 
  "IDNumber": "13488", 
  "SystemsAffectedPreamble": "", 
  "CVSS_SecurityRequirementsCR": "", 
  "CVSS_Authenication": "", 
  "CVSS_BaseScore": "", 
  "CAM_EaseOfExploitation": "0", 
  "IPProtocol": "", 
  "CERTAdvisory": "", 
  "CVSS_CollateralDamagePotential": "", 
  "Revision": "1", 
  "CVEIDs": "", 
  "VRDA_D1_DirectReport": "", 
  "CAM_WidelyKnown": "1", 
  "CAM_Population": "20", 
  "Description": "(SNI words) In research for our upcoming network auditing tool, we have uncovered a\nserious problem in many resolver implementations which trust invalid\ndata sent to them.  This vulnerability specifically applies to hostname\nto address resolution.  When a standard hostname lookup is performed on\ninternet connected systems, the resulting address will, and should be,\n4 bytes.  (Forgetting about IPv6 for now).  Assuming that the address will\nalways be 4 bytes, many privileged and unprivileged programs (including\nnetwork daemons) trust the address length field which is returned from\ngethostbyname() in the hostent structure.  By trusting the length field\nreturned by DNS to be 4 bytes, it then copies the address into a 4 byte\naddress variable.  We have found that by sending a large address to many\nprograms, an overflow occurs.  We do not have the resources to test all\noperating systems at this time (however assuming that the standard BIND\nresolver is being used, we would assume most (if not all) are vulnerable).\n\nAn example of this vulnerability occurs in rcmd.c, the standard\nlibrary routine which is used by rsh and rlogin to remotely connect\nto systems.  The faulty code within this routine follows:\n\nhp = gethostbyname(*ahost);\nif (hp == NULL) {\nherror(*ahost);\nreturn (-1);\n}\n*ahost = hp->h_name;\n\n.\n.\n.\n\nbzero(&sin, sizeof sin);\nsin.sin_len = sizeof(struct sockaddr_in);\nsin.sin_family = hp->h_addrtype;\nsin.sin_port = rport;\nbcopy(hp->h_addr_list[0], &sin.sin_addr, hp->h_length);\n\nIn this example, we copy hp->h_length ammount of data into the\naddress variable of a sockaddr_in structure, which is 4 bytes.\nThe hp->h_length variable is taken directly from the DNS reply\npacket.  If we now look at how rcmd() declares it's variables,\nand after looking through rlogin with a debugger, we can determine\nthat this is an exploitable condition.\n\nint rcmd(ahost, rport, locuser, remuser, cmd, fd2p)\nchar **ahost;\nu_short rport;\nconst char *locuser, *remuser, *cmd;\nint *fd2p;\n{\nstruct hostent *hp;\nstruct sockaddr_in sin, from;\nfd_set reads;\n\nOn further testing, and implementation of exploitation code, we can\nverify that this is indeed possible.\n\nvictim$ whoami\noliver\nvictim$ rlogin -K random-domain.com\nrandom-domain.com: Connection refused\nroot\n\nWithout the -K rlogin would attempt to use krcmd, the kerberos version.\n(Test was done on OpenBSD).  Meanwhile on attacker, we've started up the\nprogram to send a fake DNS reply.\n\nattacker# ./dnsfake\nvictim.secnet.com(4732)->dns.secnet.com(53) : lookup: random-domain.com (1:1)\nsent packet fake reply: 270 bytes\ndns.secnet.com(53)->victim.secnet.com(4732) : reply: random-domain.com (1:1)\n\nThis message has only been sent to vendors and other organizations\nwho may be responsible for fixing their implementations, and is not\npublic information (as far as we know).  This also applies to\nremote daemons, especially when we consider that all (known)\nimplementations of the BIND resolver start _res.id at 1 (the ID of\nthe query), (this seems to have been been changed in the latest\nrelease).  All that is left to guess is the originating port number\nof the query.", 
  "CVSS_AccessComplexity": "", 
  "CVSS_SecurityRequirementsAR": "", 
  "Resolution": "", 
  "Author": "This document was written by CN=Rob D McMillan/O=CERT.", 
  "CAM_Exploitation": "5", 
  "DateLastUpdated": "1999-02-14T15:08:55-05:00", 
  "CVSS_IntegrityImpact": "", 
  "VRDA_D1_Population": "", 
  "CVSS_TemporalVector": "", 
  "CVSS_ReportConfidence": "", 
  "CVSS_ConfidentialityImpact": "", 
  "CVSS_BaseVector": "", 
  "VulnerabilityCount": 1, 
  "CVSS_Exploitability": "", 
  "ThanksAndCredit": "", 
  "US-CERTTechnicalAlert": "", 
  "CAM_ScoreCurrentWidelyKnownExploited": 0, 
  "CVSS_TemporalScore": "", 
  "VRDA_D1_Impact": "", 
  "CVSS_TargetDistribution": "", 
  "CAM_InternetInfrastructure": "20", 
  "CVSS_RemediationLevel": "", 
  "Workarounds": "", 
  "ID": "VU#13488", 
  "CVSS_AvailabilityImpact": "", 
  "CAM_ScoreCurrent": 0, 
  "Overview": "", 
  "CAM_Impact": "20", 
  "DatePublic": "", 
  "DateCreated": "1998-05-21T11:43:43-04:00", 
  "References": "", 
  "Keywords": [
    "DNS", 
    "buffer overflow", 
    "root compromise", 
    "untrustworthy sources"
  ], 
  "CVSS_EnvironmentalScore": "", 
  "CAM_AttackerAccessRequired": "5"
}